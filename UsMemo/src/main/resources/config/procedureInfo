
======================Listadd 프로시저 ==================
create or replace procedure addListProcedure
(in_name IN varchar, in_bNum IN number, cur_seq OUT number)
is 
preNum number;
countNum number;

begin
	select count(num) into countNum from list where bNum=in_bNum;
	
	IF countNum=0 THEN
	insert into list values(list_num_seq.nextval,in_name,in_bNum,-1,-1 );
	--out변수 때문에 적어주어야함.
	select list_num_seq.currval into cur_seq from DUAL;
	
	ELSE
	select num into preNum from list where bNum=in_bNum and rlink=-1;
	insert into list values(list_num_seq.nextval,in_name,in_bNum,preNum,-1 );
	select list_num_seq.currval into cur_seq from DUAL;
	--현재 시퀀스값을 cur_seq에 저장하고 사용! 
	update list set rlink = cur_seq where num=preNum;

	END IF;
	
	commit;
end;
/

================card procedure======================
create or replace procedure addCardProcedure
(in_name IN varchar, in_memId IN number,in_lNum In number)
is 
preNum number;
countNum number;
cur_seq number;
begin
	select count(num) into countNum from card where lNum=in_lNum;
	
	IF countNum=0 THEN
	insert into card values(card_num_seq.nextval,in_name,null,null,in_memId,sysdate,in_lNum,-1,-1 );
	ELSE
	select num into preNum from card where lNum=in_lNum and rlink=-1;
	insert into card values(card_num_seq.nextval,in_name,null,null,in_memId,sysdate,in_lNum,preNum,-1 );
	select card_num_seq.currval into cur_seq from DUAL;
	--현재 시퀀스값을 cur_seq에 저장하고 사용! 
	update card set rlink = cur_seq where num=preNum;
	
	END IF;
	
	commit;
end;
/

================card delete procedure======================
create or replace procedure deleteCardProcedure
(card_num IN number)
is
card_llink number;
card_rlink number;

BEGIN
	select llink, rlink into card_llink, card_rlink from card where num = card_num;

	--한 리스트 안에 카드가 딱 한개 존재하는 경우
  	--그냥 해당 카드 삭제하기
	IF (card_llink = -1 AND card_rlink = -1)
	THEN	
	delete from card where num = card_num;

	--가장 맨 위의 카드가 삭제되는 경우
  	--update:삭제되는 카드넘버의 rlink와 연결된 카드넘버의 llink를 -1로 변경
	ELSIF (card_llink = -1 AND card_rlink != -1)
	THEN	
	update card set llink = -1 where num = card_rlink;
	delete from card where num=card_num;

	--가장 마지막 카드가 삭제되는 경우
	ELSIF (card_rlink = -1 AND card_llink != -1)
	THEN
	update card set rlink = -1 where num = card_llink;
	delete from card where num=card_num;

	--가운데 끼어있는 카드가 삭제되는 경우
  	--update 1번째:삭제되는 카드넘버의 llink와 연결된 카드넘버의 rlink를 알맞게 변경
  	--update 2번째:삭제되는 카드넘버의 rlink와 연결된 카드넘버의 llink를 알맞게 변경
	ELSIF (card_llink != -1 AND card_rlink != -1)
	THEN	
	update card set rlink = card_rlink where num = card_llink;	
	update card set llink = card_llink where num = card_rlink;
	delete from card where num=card_num;
  
	END IF;
  COMMIT;
END;
